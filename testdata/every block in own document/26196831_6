PostId: 26196831
Id: 104781354
Version: 7
Amount of text blocks: 2
Amount of code blocks: 2


Here is a better and less tightly coupled way to implement an OnClickListener for a RecyclerView.  
Snippet of usage:


    RecyclerView recyclerView = findViewById(R.id.recycler);
    recyclerView.addOnItemTouchListener(
        new RecyclerItemClickListener(context, new RecyclerItemClickListener.OnItemClickListener() {
          @Override public void onItemClick(View view, int position) {
            // do whatever
          }
        })
    );


RecyclerItemClickListener implementation:


    import android.content.Context;
    import android.support.v7.widget.RecyclerView;
    import android.view.GestureDetector;
    import android.view.MotionEvent;
    import android.view.View;
    public class RecyclerItemClickListener implements RecyclerView.OnItemTouchListener {
      private OnItemClickListener mListener;
      public interface OnItemClickListener {
        public void onItemClick(View view, int position);
      }
      GestureDetector mGestureDetector;
      public RecyclerItemClickListener(Context context, OnItemClickListener listener) {
        mListener = listener;
        mGestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {
          @Override public boolean onSingleTapUp(MotionEvent e) {
            return true;
          }
        });
      }
      @Override public boolean onInterceptTouchEvent(RecyclerView view, MotionEvent e) {
        View childView = view.findChildViewUnder(e.getX(), e.getY());
        if (childView != null && mListener != null && mGestureDetector.onTouchEvent(e)) {
          mListener.onItemClick(childView, view.getChildPosition(childView));
          return true;
        }
        return false;
      }
      @Override public void onTouchEvent(RecyclerView view, MotionEvent motionEvent) { }
      @Override
      public void onRequestDisallowInterceptTouchEvent (boolean disallowIntercept){}
    }




