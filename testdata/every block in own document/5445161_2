PostId: 5445161
Id: 21289331
Version: 3
Amount of text blocks: 2
Amount of code blocks: 1


Here's a way using only standard Java library.


    public String convertStreamToString(java.io.InputStream is) {
        try {
            return new java.util.Scanner(is).useDelimiter("\\A").next();
        } catch (java.util.NoSuchElementException e) {
            return "";
        }
    }


I learned this trick from ["Stupid Scanner tricks"][1] article. The reason it works is because [Scanner][2] iterates over tokens in the stream, and in this case we separate tokens using "beginning of the input boundary" (\A) thus giving us only one token for the entire contents of the stream.
Note, if you need to be specific about the input stream's encoding, you can provide the second argument to `Scanner` ctor that indicates what charset to use (e.g. "UTF-8").
Hat tip goes also to [Jacob,][3] who once pointed me to the said article.
**EDITED:** Thanks to a suggestion from [Patrick][4], made the function more robust when handling an empty input stream.
  [1]: http://weblogs.java.net/blog/pat/archive/2004/10/stupid_scanner_1.html
  [2]: http://download.oracle.com/javase/6/docs/api/java/util/Scanner.html
  [3]: http://stackoverflow.com/users/68127/jacob-gabrielson
  [4]: http://stackoverflow.com/users/101272/patrick




