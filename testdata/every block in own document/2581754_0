PostId: 2581754
Id: 5280933
Version: 1
Amount of text blocks: 2
Amount of code blocks: 2


Here's a 1.5-friendly version you're free to use:


    import java.util.*;
    
    public class MapUtil
    {
        public static <K, V extends Comparable<? super V>> Map<K, V> 
            sortByValue( Map<K, V> map )
        {
            List<Map.Entry<K, V>> list =
                new LinkedList<Map.Entry<K, V>>( map.entrySet() );
            Collections.sort( list, new Comparator<Map.Entry<K, V>>()
            {
                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
                {
                    return (o1.getValue()).compareTo( o2.getValue() );
                }
            } );
    
            Map<K, V> result = new LinkedHashMap<K, V>();
            for (Map.Entry<K, V> entry : list)
            {
                result.put( entry.getKey(), entry.getValue() );
            }
            return result;
        }
    }


And an associated JUnit4 test so you don't have to take my word for it:


    import java.util.*;
    import org.junit.*;
    
    public class MapUtilTest
    {
        @Test
        public void testSortByValue()
        {
            Random random = new Random(System.currentTimeMillis());
            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);
            for(int i = 0 ; i < 1000 ; ++i) {
                testMap.put( "SomeString" + random.nextInt(), random.nextInt());
            }
            
            testMap = MapUtil.sortByValue( testMap );
            Assert.assertEquals( 1000, testMap.size() );
    
            Integer previous = null;
            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {
                Assert.assertNotNull( entry.getValue() );
                if (previous != null) {
                    Assert.assertTrue( entry.getValue() >= previous );
                }
                previous = entry.getValue();
            }
        }
    
    }




