PostId: 326440
Id: 40278052
Version: 5
Amount of text blocks: 3
Amount of code blocks: 2


In general, you should specify the character encoding to use when converting the bytes of a file to text. There are some special cases when you just want to use the platform default, but they are rare, and you should be able to explicitly justify why this is okay.
Anyway, here's an efficient way to it:


    private static String readFile(String path) throws IOException {
      FileInputStream stream = new FileInputStream(new File(path));
      try {
        FileChannel fc = stream.getChannel();
        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());
        /* Instead of using default, pass in a decoder. */
        return Charset.defaultCharset().decode(bb).toString();
      }
      finally {
        stream.close();
      }
    }


---
In Java 7, [a utility method has been added to read all "lines" from a file,][1] as a `List<String>`. This isn't exactly the same thing; some information is lost because the actual line terminators are discarded. It is, however, a robust and convenient implementation of an extremely common use case:


    List<String> lines = 
      Files.readAllLines(Paths.get("smallfile.txt"), StandardCharsets.UTF_8);


  [1]: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29




